<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itwillbs.illusion.mapper.RecruitMapper">

    <sql id="recruitFilterCondition">
        <where>
            <!-- 지역 필터 -->
            <if test="location != null and !location.isEmpty()">
                AND r.location IN
                <foreach item="locCode" collection="location" open="(" separator="," close=")">#{locCode}</foreach>
            </if>
            <!-- 직무 필터 -->
            <if test="occupation != null and !occupation.isEmpty()">
                AND r.occupation IN
                <foreach item="occCode" collection="occupation" open="(" separator="," close=")">#{occCode}</foreach>
            </if>
	        <if test="experience != null and !experience.isEmpty()">
	            AND r.experience IN
	            <foreach item="expCode" collection="experience" open="(" separator="," close=")">
	                #{expCode}
	            </foreach>
	        </if>
	        <if test="salary != null and !salary.isEmpty()">
	            AND r.salary IN
	            <foreach item="salCode" collection="salary" open="(" separator="," close=")">
	                #{salCode}
	            </foreach>
	        </if>
	        <if test="degree != null and !degree.isEmpty()">
	            AND r.degree IN
	            <foreach item="degCode" collection="degree" open="(" separator="," close=")">
	                #{degCode}
	            </foreach>
	        </if>
	        <if test="keyword != null and keyword != ''">
				r.recruit_subject LIKE CONCAT('%', #{keyword}, '%')
			</if>
        </where>
    </sql>
    
    <select id="homeSelectRecruitList" parameterType="com.itwillbs.illusion.vo.RecruitFilterVO" resultType="com.itwillbs.illusion.vo.RecruitVO">
    	SELECT 
    		   recruit_idx
    		   ,start_date
			   ,end_date
			   ,recruit_subject
			   ,views_count
    	  FROM recruit
    	 ORDER BY views_count DESC, recruit_idx DESC
    	 LIMIT #{startRow}, #{listLimit}
    </select>
	
	<select id="selectRecruitList" parameterType="com.itwillbs.illusion.vo.RecruitFilterVO" resultType="com.itwillbs.illusion.vo.RecruitVO">
	    SELECT
	        r.recruit_idx,
	        r.recruit_subject,
	        r.start_date,
	        r.end_date,
	        r.views_count,
	        CONCAT(c_parent.code_name, ' ', c_child.code_name) AS locationName,
	        occ.code_name AS occupationName
	    FROM 
	        recruit r
	        LEFT JOIN common_code c_child ON r.location = c_child.code
	        LEFT JOIN common_code c_parent ON c_child.parent_code_id = c_parent.code
	        LEFT JOIN common_code occ ON r.occupation = occ.code
	        LEFT JOIN common_code exp ON r.experience = exp.code
			LEFT JOIN common_code sal ON r.salary = sal.code
			LEFT JOIN common_code deg ON r.degree = deg.code
	    
		<include refid="recruitFilterCondition"></include>
	    
	    ORDER BY
	    <choose>
	        <!-- DTO의 sort 필드 값을 확인하여 정렬 기준을 결정 -->
	        <when test="sort == 'end_date'">
	            r.end_date ASC, r.recruit_idx DESC
	        </when>
	        <when test="sort == 'views'">
	            r.views_count DESC, r.recruit_idx DESC
	        </when>
	        <otherwise>
	            r.recruit_idx DESC
	        </otherwise>
	    </choose>
	    LIMIT #{startRow}, #{listLimit}
	</select>
	
	<select id="getBoardListCount" parameterType="com.itwillbs.illusion.vo.RecruitFilterVO" resultType="int">
	    SELECT COUNT(*)
  	    FROM recruit r
        <include refid="recruitFilterCondition"></include>
	</select>
	
	<select id="selectRecruitIndex" resultType="com.itwillbs.illusion.vo.RecruitVO">
<!-- 	SELECT  -->
<!-- 		r.recruit_idx, -->
<!-- 	    r.recruiter_member_idx, -->
<!-- 		loc.code_name AS location, -->
<!-- 		occ.code_name as occupation, -->
<!-- 	    exp.code_name AS experience, -->
<!-- 	    pos.code_name AS position, -->
<!-- 	    sal.code_name AS salary, -->
<!-- 	    deg.code_name AS degree, -->
<!-- 		r.start_date, -->
<!-- 		r.end_date, -->
<!-- 		r.app_count, -->
<!-- 	    r.recruit_context, -->
<!-- 		r.recruit_subject, -->
<!-- 	    typ.code_name AS recruit_type, -->
<!-- 	    r.recruit_hiring_num, -->
<!-- 	    r.start_time, -->
<!-- 	    r.end_time, -->
<!-- 	    ema.recruiter_member_email, -->
<!-- 	    c.company_idx, -->
<!-- 	    c.ceo_name, -->
<!-- 	    c.company_name, -->
<!-- 	    cty.code_name AS company_type, -->
<!-- 	    cin.code_name AS company_industry, -->
<!-- 	    c.company_estab_date, -->
<!-- 	    a.province, -->
<!-- 		a.city_district, -->
<!-- 		a.postcode, -->
<!-- 		a.road_address, -->
<!-- 		a.detail_address, -->
<!-- 		a.full_address, -->
<!-- 		r.preferred, -->
<!-- 		r.apply_doc, -->
<!-- 		r.apply_method, -->
<!-- 		r.work_start_day, -->
<!-- 		r.work_end_day -->
<!-- 	FROM  -->
<!-- 		recruit r  -->
<!-- 		LEFT JOIN common_code loc ON r.location = loc.code -->
<!-- 		LEFT JOIN common_code occ ON r.occupation = occ.code -->
<!-- 		LEFT JOIN common_code exp ON r.experience = exp.code -->
<!-- 		LEFT JOIN common_code pos ON r.position = pos.code -->
<!-- 		LEFT JOIN common_code sal ON r.salary = sal.code -->
<!-- 		LEFT JOIN common_code deg ON r.degree = deg.code -->
<!-- 		LEFT JOIN common_code typ ON r.recruit_type = typ.code -->
<!-- 		LEFT JOIN recruiter_member ema ON r.recruiter_member_idx = ema.recruiter_member_idx -->
<!-- 		LEFT JOIN company c ON ema.company_idx = c.company_idx -->
<!-- 		LEFT JOIN common_code cty ON c.company_type = cty.code -->
<!-- 		LEFT JOIN common_code cin ON c.company_industry = cin.code -->
<!-- 		LEFT JOIN address a ON c.address_idx = a.address_idx -->
<!-- 	WHERE  -->
<!-- 		r.recruit_idx = #{recruit_idx}; -->
	  SELECT 
		    r.recruit_idx,
		    r.member_idx,	<!-- recruit_member_idx 이제 안씀 -->
		    occ.code_name AS occupation,
		    exp.code_name AS experience,
		    pos.code_name AS position,
		    sal.code_name AS salary,
		    deg.code_name AS degree,
		    r.start_date,
		    r.end_date,
		    r.app_count,
		    r.recruit_context,
		    r.recruit_subject,
		    typ.code_name AS recruit_type,
		    r.recruit_hiring_num,
		    r.start_time,
		    r.end_time,
		    m.address_name,
		    m.member_email,
		    m.gender,
		    c.company_idx,
		    c.ceo_name,
		    c.company_name,
		    cty.code_name AS company_type,
		    c.company_estab_date,
		    c.company_logo,
		    r.preferred,
		    r.apply_doc,
		    r.apply_method,
		    wsd.code_name as work_start_day,
		    wed.code_name as work_end_day,
		    locs.locations AS location         -- ← 집계된 지역명들
		FROM 
			recruit r
			LEFT JOIN ( SELECT r2.recruit_idx,
			                   GROUP_CONCAT(loc.code_name ORDER BY loc.code_name SEPARATOR ', ') AS locations
						 FROM recruit r2
						 LEFT JOIN common_code loc 
						   ON FIND_IN_SET(loc.code, REPLACE(r2.location, ' ', ''))
						GROUP BY r2.recruit_idx ) locs 
							          ON locs.recruit_idx = r.recruit_idx
			LEFT JOIN common_code occ ON r.occupation   = occ.code
			LEFT JOIN common_code exp ON r.experience   = exp.code
			LEFT JOIN common_code pos ON r.position     = pos.code
			LEFT JOIN common_code sal ON r.salary       = sal.code
			LEFT JOIN common_code deg ON r.degree       = deg.code
			LEFT JOIN common_code typ ON r.recruit_type = typ.code
			LEFT JOIN member m ON r.member_idx = m.member_idx
			LEFT JOIN company c ON m.company_idx = c.company_idx	<!-- 이 부분 수정함 member_idx로 -->
			LEFT JOIN common_code cty ON c.company_type     = cty.code
			LEFT JOIN common_code wsd ON r.work_start_day = wsd.code
			LEFT JOIN common_code wed ON r.work_end_day = wed.code
		WHERE 
			r.recruit_idx = #{recruit_idx};
	</select>
	
	<!-- 조회수 증가 -->
	<update id="increaseViewCount">
		UPDATE recruit
		   SET views_count = views_count + 1
		 WHERE recruit_idx = #{recruit_idx}
	</update>
	
	<select id="getClList" resultType="com.itwillbs.illusion.vo.ApplyVO">
		SELECT c.cl_idx
		     , c.cl_title 
		  FROM cover_letter c 
		 WHERE c.member_idx = #{member_idx};
	</select>
	<select id="getResumeList" resultType="com.itwillbs.illusion.vo.ApplyVO">
		SELECT r.resume_idx
		     , r.resume_title
		  FROM resume r
		 WHERE r.member_idx = #{member_idx};
	</select>
	
	<insert id="insertApply">
	INSERT INTO apply
		 ( member_idx
		 , recruit_idx
		 , resume_idx
		 , cl_idx
		 , apply_files_path
		 , apply_status
		 , is_viewed )
	VALUES ( #{member_idx}
		 , #{recruit_idx}
	     , #{resume_idx}
		 , #{cl_idx}
		 , #{apply_files_path}	
		 , #{apply_status}
		 , #{is_viewed});
	</insert>
	
	<update id="cntRecruit">
	    UPDATE recruit
    	SET app_count = app_count + 1
    	WHERE recruit_idx = #{recruit_idx}
	</update>
	
	<!-- 사용자 일치하는지 확인 용도 -->
	<select id="selectMemberIdx">
		SELECT member_idx
		  FROM member 
		 WHERE member_id = #{member_id}
	</select>
	
</mapper>