<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itwillbs.illusion.mapper.AdminMapper">
	
	<!-- 구인자 수 조회 -->
	<select id="getApplicantCount">
		SELECT count(*)
		  FROM member
		 WHERE member_type = "mem002";
	</select>
	
	<!-- 구직자 수 조회 -->
	<select id="getEmployerCount">
		SELECT count(*)
		  FROM member
		 WHERE member_type = "mem003";
	</select>
	
	<!-- 공고 수 조회 -->
	<select id="getRecruitCount">
		SELECT count(*)
		  FROM recruit
	</select>
	
	<!-- 게시글 수 조회 -->
	<select id="getBoardCount">
		SELECT count(*)
	      FROM board		
	</select>
	
	<!-- 생성된 ai 자소서 수 조회 -->
	<select id="getCoverletterCount">
		SELECT count(*)
		  FROM cover_letter
	</select>
	
	
	<!-- 회원 정보 조회 -->
	<select id="getMember">
		SELECT 
			   m.member_idx
		 	 , m.member_id
			 , m.member_name
			 , m.member_email
			 , m.member_type AS member_type_code
			 , t.code_name AS member_type_name
			 , m.member_status AS member_status_code
			 , s.code_name AS member_status_name
			 , member_signup_date 
	      FROM member m
	      JOIN common_code t ON m.member_type = t.code
	       AND t.code_group_id = 'member_type'
	      JOIN common_code s ON m.member_status = s.code
	       AND s.code_group_id = 'member_status'  
	     LIMIT #{listLimit} OFFSET #{startRow}
	</select>
	
	<!-- 전체 회원 수 조회 -->
	<select id="getMemberCount" resultType="int">
		SELECT count(*)
		  FROM member
	</select>
	
	<!-- 회원 타입 조회 -->
	<select id="getMemberType">
		SELECT code, code_name
		  FROM common_code
		 WHERE code_group_id = "member_type" 
	</select>
	
	<!-- 회원 상태 조회 -->
	<select id="getMemberStatus">
		SELECT code, code_name
		  FROM common_code
		 WHERE code_group_id = "member_status" 
	</select>
	
	<update id="updateMemberStatusAndType">
		UPDATE member
		   SET member_status = #{member_status_code} 
		   	 , member_type = #{member_type_code}
		 WHERE member_idx = #{member_idx}
			
	</update>	
	
	<!-- 회원 상세 정보 조회 -->
	<select id="getMemberDetail" resultType="map">
		SELECT 
			   m.member_idx
		 	 , m.member_id
			 , m.member_name
			 , m.member_pw
			 , m.member_email
			 , m.member_phone
			 , m.address_num
			 , m.address_name
			 , m.member_type AS member_type_code
			 , t.code_name AS member_type_name
			 , m.member_signup_date
			 , m.member_status AS member_status_code
			 , s.code_name AS member_status_name
			 , m.member_marketing_agreed
			 , m.profile_picture_url
			 , m.gender AS gender_code
			 , g.code_name AS gender_name
			 , m.resume_birth
			 , m.token
			 , m.recruiter_member_email
			 , m.company_idx
			 , m.recruiter_number
			 , m.mail_auth_status
	      FROM member m
	      JOIN common_code t ON m.member_type = t.code
	       AND t.code_group_id = 'member_type'
	      JOIN common_code s ON m.member_status = s.code
	       AND s.code_group_id = 'member_status'  
	      JOIN common_code g ON m.gender = g.code
	       AND g.code_group_id = 'GENDER'
		 WHERE member_idx = #{member_idx}
	</select>
	
	<!-- 회원 삭제 -->
	<delete id="deleteMember">
		DELETE FROM member
		 WHERE member_idx = #{member_idx}
	</delete>
	
	<!-- 공고 리스트 조회 ㅈㅈ-->
<!-- 	<select id="getRecruitment"> -->
<!-- 		SELECT  -->
<!-- 			 , recruit_subject -->
<!-- 			 , start_date -->
<!-- 			 , end_date -->
			 
<!-- 		  FROM recruit r -->
<!-- 		  JOIN member m ON  -->
<!-- 	</select> -->
	
	<!-- 게시글 리스트 조회 -->
	<select id="getBoardList">
		SELECT 
			   board_idx
			 , board_type
			 , board_title
			 , board_create_at
			 , m.member_id
		  FROM board b
		  JOIN member m ON b.member_idx = m.member_idx
		  LIMIT #{listLimit} OFFSET #{startRow}
	</select>
	
	<!-- 게시글 삭제 -->
	<delete id="deleteBoard">
		DELETE FROM board
     	 WHERE board_idx = #{board_idx}
	</delete>
	
	<!-- 공통코드 전체 조회 -->
	<select id="getCommonCodeList">
		SELECT 
		       code
		     , code_name
		     , cc.code_group_id 
		     , description
		     , group_name
		  FROM common_code cc
		  JOIN common_code_group cg ON cc.code_group_id = cg.code_group_id
		<where>
			<if test="keyword != null and !keyword.equals('')">
				code LIKE CONCAT('%', #{keyword}, '%')
				OR code_name LIKE CONCAT('%', #{keyword}, '%')
				OR description LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
		 LIMIT #{listLimit} OFFSET #{startRow}
	</select>
	
	<!-- 공통코드 그룹 목록 조회 -->
	<select id="getCommonCodeGroups">
		SELECT
		       code_group_id,
		       group_name,
		       description
		  FROM common_code_group
	  ORDER BY regist_date DESC
	</select>
	
	<!-- 키워드에 따른 공통코드 수 조회 -->
	<select id="getCommonCodeCount">
		SELECT count(*) 
		  FROM common_code cc
		  JOIN common_code_group cg ON cc.code_group_id = cg.code_group_id
	  <where>
	     <if test="keyword != null and keyword != ''">
            code LIKE CONCAT('%', #{keyword}, '%')
            OR code_name LIKE CONCAT('%', #{keyword}, '%')
            OR description LIKE CONCAT('%', #{keyword}, '%')
        </if>
	  </where>
		       
	</select>
	
	<!-- 공통코드 그룹 추가 -->
	<insert id="insertCommonCodeGroup">
	    INSERT INTO common_code_group (
	        code_group_id,
	        group_name,
	        description,
	        regist_date
	    ) VALUES (
	        #{code_group_id},
	        #{group_name},
	        #{description},
	        now()
	    )
	</insert>
	
	<!-- 공통코드 일괄 추가 -->
	<insert id="insertCommonCodes">
	    INSERT INTO common_code (
	        code_group_id,
	        code,
	        code_name,
	        parent_code_id
	    ) VALUES
	    <foreach collection="list" item="code" separator=",">
	        (
	            #{code.code_group_id},
	            #{code.code},
	            #{code.code_name},
	            #{code.parent_code_id}
	        )
	    </foreach>
	</insert>
	
	<!-- 공통코드 하나 조회 -->
	<select id="getCommonCode">
		SELECT 
		       code
		     , code_name
		     , cc.code_group_id 
		     , description
		     , group_name
		  FROM common_code cc
		  JOIN common_code_group cg ON cc.code_group_id = cg.code_group_id
		 WHERE code = #{code}
	</select>
	
	<!-- 공통코드 수정 -->
	<update id="updateCommonCode">
	    UPDATE common_code cc
	INNER JOIN common_code_group cg ON cc.code_group_id = cg.code_group_id 
	       SET cc.code_name = #{code_name}
	         , cg.group_name = #{group_name}
			 , cg.description = #{description}
			 , cc.code = #{code}
	     WHERE cc.code = #{code}
	</update>
	
	<!-- 공통코드 삭제 -->
	<delete id="deleteCommonCode">
		DELETE FROM common_code
		 WHERE code = #{code}
	</delete>
	
	
</mapper>