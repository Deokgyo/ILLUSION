<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itwillbs.illusion.mapper.RecruiterMapper">
	
	<!-- 대분류 값 가져오기  -->
	<select id="getLocation">
		SELECT code, code_name
		  FROM common_code
		 WHERE code_group_id = 'location'
		   AND parent_code_id is null;
	</select>
	
	<!-- 소분류값 가져오기 -->
	<select id="getlocDetailList">
		SELECT code_group_id, code, code_name
		  FROM common_code
		 WHERE code_group_id = 'location'
		<choose>
		  <when test="location != null">
		    AND (
		      (#{location} REGEXP '^[0-9]+$' AND parent_code_id = #{location})
		      OR
		      (#{location} NOT REGEXP '^[0-9]+$' AND code_name LIKE CONCAT('%', #{location}, '%'))
		    )
		  </when>
		  <otherwise>
		  	and 1 = 1
		  </otherwise>
		</choose>
	</select>
	
	<!-- 직무 대분류 값 가져오기  -->
	<select id="getOccupation">
		SELECT code, code_name
		  FROM common_code
		 WHERE code_group_id = 'OCCUPATION'
		   AND parent_code_id is null
	</select>
	
	<!--  직무 소분류 값 가져오기 -->
	<select id="getJobList">
		SELECT code, code_name
		  FROM common_code
		 WHERE code_group_id = 'occupation'	
		   AND parent_code_id = #{occupation};
	</select>
	
	
	<!-- 스케줄러사용해서 주기적으로 공고 마감 처리 -->
	<select id="expiredRecruiteClose">
		UPDATE recruit
		   SET rec_status = 'RECS02'
	  	 WHERE DATE(end_date) &lt; CURDATE()
		   AND rec_status = 'RECS01'
	</select>
	
	
	<select id="getRecruitmentList">
		SELECT r.recruit_subject
			 , c.code_name as 'rec_status'
		     , r.app_count
		     , r.post_create_at
		     , r.end_date
		     , r.recruit_idx
		  FROM recruit r 
		  JOIN common_code c 
		    ON r.rec_status = c.code
		 WHERE r.rec_status like #{status}
		   AND member_idx = ( SELECT member_idx
										  FROM member 
									     WHERE member_id = #{member_id})
	</select>
	
	<!-- 공고 마감 -->
	<update id="recruitClose">
		UPDATE recruit
		   SET rec_status = 'RECS02'
		 WHERE recruit_idx = #{recruit_idx};
	</update>
	
	<!-- 공고 삭제 -->
	<delete id="recruitDelete">
		DELETE FROM recruit
		 WHERE recruit_idx = #{recruit_idx};
	</delete>
	
	<!-- 기업정보가져오기  -->
	<select id="getCompanyInfo">
		SELECT c.company_logo as '기업 로고'
			 , c.company_name as '기업 이름'
			 , c.ceo_name as '대표자명' 
			 , DATE_FORMAT(c.company_estab_date, '%Y-%m-%d') AS '기업 설립일'
			 , m.address_name as '기업 주소' 
			 , m.member_id as '아이디' 
			 , m.member_name as '담당자 이름'
			 , m.member_email as '담당자 이메일'
		  FROM member m 
		  JOIN company c ON c.company_idx = m.company_idx
		 WHERE member_id = #{member_id} 
	</select>
	
	<!-- company_idx 가져오기 -->
	<select id="selectCompany_idx">
		SELECT IFNULL(company_idx, 0) as company_idx
		  FROM member
		 WHERE member_idx = #{member_idx}
	</select>
	
	<!-- 채용중인 공고 개수 가져오기  -->
	<select id="getRecruitmentCnt">
		SELECT count(*)
		  FROM recruit 
		 WHERE rec_status = 'RECS01' 
		 AND member_idx = ( select member_idx
							  from member 
							 where member_id = #{member_id})
	</select>
	
	<!-- 공고 제목과 마감일 들고오기  -->
	<select id="getRecruitmentSubjectDate">
		SELECT recruit_subject, end_date, recruit_idx
		  FROM recruit 
		 WHERE rec_status = 'RECS01' 
		   AND member_idx = ( SELECT member_idx
							  FROM member 
						     WHERE member_id = #{member_id} )
		 LIMIT 5;
	</select>
	
	<!-- 미열람 이력서 수 가져오기  -->
	<select id="selectUnViewedCnt">
		 SELECT count(*)
		   FROM apply a 
		   LEFT JOIN recruit r ON a.recruit_idx = r.recruit_idx
		   LEFT JOIN resume res ON a.resume_idx = res.resume_idx -- resume_idx로 조인해서 resume 테이블 접근
		   LEFT JOIN member m ON a.member_idx = m.member_idx
		   LEFT JOIN resume_exp_info rex  on a.resume_idx = rex.resume_idx -- resume_idx
		   LEFT JOIN common_code degree ON res.degree = degree.code
		   LEFT JOIN common_code experience ON rex.experience = experience.code
		  WHERE r.member_idx = #{member_idx} -- 이부분 컨트롤러에서 들고오는 값 대체 
		    AND a.is_viewed = 'BOL002' -- 미열람 조건 
	</select>
	
	<select id="selectTotalAppCnt">
		SELECT IFNULL(SUM(app_count), 0) as app_count 
		  FROM recruit 
	     WHERE member_idx = ( SELECT member_idx 
					 		  FROM member 
						     WHERE member_id = #{member_id});
	</select>
	
	<!-- 미열람 이력서 조회할때 조회 했다고 바꾸기  -->
	<select id="updateIsviewed">
		UPDATE apply
		   SET is_viewed = 'BOL001'
		 WHERE apply_idx = #{apply_idx};
	
	</select>
	
	<!-- 미열람 이력서 정보 가죠오기 -->
	<select id="selectResumeInfo">
		 SELECT res.resume_title 
	          , degree.code_name as degree_name
	          , res.major 
	          , SUBSTRING(m.address_name, 1, LOCATE('구', m.address_name)) as address  
	          , experience.code_name as experience_name
	          , m.member_idx
	          , res.resume_idx
	          , apply_idx
		   FROM apply a 
		   LEFT JOIN recruit r ON a.recruit_idx = r.recruit_idx
		   LEFT JOIN resume res ON a.resume_idx = res.resume_idx 
		   LEFT JOIN member m ON a.member_idx = m.member_idx
		   LEFT JOIN resume_exp_info rex  on a.resume_idx = rex.resume_idx 
		   LEFT JOIN common_code degree ON res.degree = degree.code
		   LEFT JOIN common_code experience ON rex.experience = experience.code
		  WHERE r.member_idx = #{member_idx} 
		    AND a.is_viewed = 'BOL002'
	</select>
	
<!--  기업 이름, 담당자 이름, 담당자 이메일, 마감 임박 공고 개수 가져오기  -->
	<select id="getRecruiterInfo">
		SELECT m.member_name as member_name
		   	 , m.member_email as member_email
		     , c.company_name as company_name 
		     , COALESCE( 
		       COUNT(CASE WHEN r.end_date 
		       		 BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL 7 DAY) 
                  	 THEN 1 END), 0) as closing_soon_count
		  FROM member m
	 LEFT JOIN company c 
		    ON c.company_idx = m.company_idx
     LEFT JOIN recruit r 
		    ON r.member_idx = m.member_idx
		 WHERE m.member_id = #{member_id}  
	  GROUP BY m.member_name, m.member_email, c.company_name
	</select>
	
	<!--  공고 수정 페이지에서 기존 내용 가져오기  -->
	<select id="selectRecruitModify">
		SELECT r.recruit_idx
			 , r.recruit_subject
			 , c6.code as recruit_type
			 , r.occupation
		     , r.location
		     , c1.code as work_start_day
		     , c7.code as work_end_day
		     , c2.code as position
		     , c3.code as experience
		     , r.start_time
		     , r.end_time
		     , r.recruit_hiring_num
		     , c4.code as salary
		     , c5.code as degree
		     , r.recruit_context
		     , r.preferred
		     , r.start_date
		     , r.end_date
		     , r.apply_doc
		     , r.apply_method
		  FROM recruit r  
	 LEFT JOIN common_code c1 ON r.work_start_day = c1.code
	 LEFT JOIN common_code c7 ON r.work_end_day = c7.code
	 LEFT JOIN common_code c2 ON r.position = c2.code
	 LEFT JOIN common_code c3 ON r.experience = c3.code
	 LEFT JOIN common_code c4 ON r.salary = c4.code
	 LEFT JOIN common_code c5 ON r.degree = c5.code
	 LEFT JOIN common_code c6 ON r.recruit_type = c6.code
	     WHERE recruit_idx =  #{recruit_idx};
	</select>
	
	<!-- 공고 수정 작업  -->
	<update id="recruitModify">
		UPDATE recruit
		   SET member_idx = ( SELECT member_idx 
                              FROM member 
                             WHERE member_id = #{member_id} )
		     , occupation = #{recruit.occupation}
		 	 , location = #{recruit.location}
			 , experience = #{recruit.experience}
		 	 , salary = #{recruit.salary}
		 	 , degree = #{recruit.degree}
		  	 , start_date = #{recruit.start_date}
			 , end_date = #{recruit.end_date}
		  	 , recruit_context = #{recruit.recruit_context}
		  	 , recruit_subject = #{recruit.recruit_subject}
		   	 , recruit_type = #{recruit.recruit_type}
		  	 , recruit_hiring_num = #{recruit.recruit_hiring_num}
		  	 , position = #{recruit.position}
		  	 , preferred = #{recruit.preferred}
		  	 , apply_doc = #{recruit.apply_doc}
		  	 , apply_method = #{recruit.apply_method}
		  	 , work_start_day = #{recruit.work_start_day}
		  	 , work_end_day = #{recruit.work_end_day}
		  	 , start_time = #{recruit.start_time}
		  	 , end_time = #{recruit.end_time}
		  	 , rec_status = #{recruit.rec_status}
  	  	 WHERE recruit_idx = #{recruit.recruit_idx};
	
	</update>
	
<!-- 	// 공고 등록  -->
	<insert id="insertRecruitment">
		insert into recruit
	 		 ( member_idx, 
	   		   occupation, 
       		   location, 
       		   experience,
       		   salary, 
               degree, 
       		   start_date, 
       		   end_date, 
       		   recruit_context, 
		       recruit_subject, 
		       recruit_type, 
		       recruit_hiring_num, 
		       position, 
		       preferred, 
		       apply_doc, 
		       apply_method, 
		       work_start_day, 
		       work_end_day, 
		       start_time, 
		       end_time,
		       rec_status )
	    values 
	    	( (select member_idx 
	    		 from member 
	    		where member_id = #{member_id})
			 , #{recruit.occupation} 
		     , #{recruit.location}
		     , #{recruit.experience}
			 , #{recruit.salary}
			 , #{recruit.degree}
			 , #{recruit.start_date}
		     , #{recruit.end_date}
		     , #{recruit.recruit_context}
			 , #{recruit.recruit_subject}
		     , #{recruit.recruit_type}
		     , #{recruit.recruit_hiring_num}
		     , #{recruit.position}
		     , #{recruit.preferred}
		     , #{recruit.apply_doc}
		     , #{recruit.apply_method}
		     , #{recruit.work_start_day}
		     , #{recruit.work_end_day}
			 , #{recruit.start_time}
		     , #{recruit.end_time}
		     , #{recruit.rec_status}
		     ) ;
	</insert>





</mapper>