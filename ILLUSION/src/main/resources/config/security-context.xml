<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security 
                        http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- =================================================================== -->
    <!-- 1. 보안 규칙 설정 (가장 중요한 부분) -->
    <!-- =================================================================== -->
    <http>
        <!-- 1-1) URL별 접근 권한 설정 -->
        <!-- 순서가 매우 중요합니다! 구체적인 경로를 먼저, 넓은 범위를 나중에 작성해야 합니다. -->
        <intercept-url pattern="/resources/**" access="permitAll" /> <!-- static 자원(css, js, images)은 모두 허용 -->
        <intercept-url pattern="/login" access="permitAll" />       <!-- 로그인 페이지는 모두 허용 -->
        <intercept-url pattern="/register" access="permitAll" />    <!-- 회원가입 페이지는 모두 허용 -->
        <intercept-url pattern="/registerPro" access="permitAll" /> 
        <intercept-url pattern="/" access="permitAll" />           <!-- 메인 페이지는 모두 허용 -->
        
        <!-- 커뮤니티 로그인 사용자 기능 사용 여부 -->
        <intercept-url pattern="/boardWrite" access="isAuthenticated()" />
	    <intercept-url pattern="/communityModify" access="isAuthenticated()" />
	    <intercept-url pattern="/api/board/**" access="isAuthenticated()" />
	    <intercept-url pattern="/api/boards/**" access="isAuthenticated()" />
        
        <!-- 관리자권한 있으면 모든페이짖 접근가능 -->
        <intercept-url pattern="/**" access="hasRole('MEM001')" /> <!-- /admin/으로 시작하는 경로는 MEM001 역할만 허용 -->
        
        <!-- 그 외의 모든 페이지는 로그인 사용자만 접근가능 -->
        <intercept-url pattern="/**" access="hasRole('MEM001') or isAuthenticated()" />   <!-- 그 외 모든 경로는 관리자이거나 로그인 사용자만 허용 -->
        
        <!-- TODO 위 코드 수정 -->


       <!-- 1-2) 커스텀 로그인 폼 설정 (수정됨) -->
		<form-login 
		    login-page="/login"                                  
		    login-processing-url="/loginPro"                    
		    username-parameter="member_id"                       
		    password-parameter="member_pw"                      
		    default-target-url="/"  
		    authentication-failure-url="/login?error=true" />

        <!-- 1-3) 로그아웃 설정 -->
        <logout 
            logout-url="/logout"                                 
            logout-success-url="/"                               
            invalidate-session="true"                           
            delete-cookies="JSESSIONID, autoLoginId" />          

        <!-- 1-4) CSRF(Cross-Site Request Forgery) 공격 방어 활성화 (기본값) -->
        <csrf />
    </http>

    <!-- =================================================================== -->
    <!-- 2. 인증 관리자 설정 (로그인 처리 방법 정의) -->
    <!-- =================================================================== -->
    <authentication-manager>
        <authentication-provider>
            <!-- 2-1) 비밀번호 암호화 방식 정의 (BCrypt 사용) -->
            <!-- BCrypt는 현재 가장 표준적이고 안전한 암호화 방식입니다. -->
            <password-encoder ref="bcryptPasswordEncoder" />

            <!-- 2-2) 데이터베이스(JDBC)를 이용한 인증 설정 -->
            <jdbc-user-service 
                data-source-ref="dataSource" 
                users-by-username-query="
                    SELECT member_id, member_pw, true as enabled 
                    FROM member 
                    WHERE member_id = ?"
                authorities-by-username-query="
                    SELECT member_id, CONCAT('ROLE_', member_type) as authority 
                    FROM member 
                    WHERE member_id = ?" />
        </authentication-provider>
    </authentication-manager>

    <!-- BCryptPasswordEncoder를 스프링 빈(Bean)으로 등록 -->
    <beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

</beans:beans>